DEFINIÇÃO E CRIAÇÃO DE UM DOCKERFILE

Primeiro dockerfile

Criar minha própria imagem

Primeiro fazer manualmente

> docker run -dti --name ubuntu-python ubuntu
> docker exec -ti ubuntu-python bash
> apt install -y python3 nano
> apt clean (limpar os arquivos de instalação usados)
> nano app.py (bem simples)
> python3 app.py
> exit

> docker ps
> docker exec -ti ubuntu-python python3 /opt/app.py
> docker stop ubuntu-python
> docker rm ubuntu-python

----------------------------
Agora com o dockerfile

> mkdir /images
> cd /images
> mkdir ubuntu-python
> cd ubuntu-python
> nano app.py
	nome = input("Qual e o seu nome?")
	print (nome)
> nano dockerfile
	FROM ubuntu
	RUN atp update && apt install -y python3 && apt clean
	COPY app.py /opt/app.py
	CMD python3 /opt/app.py

Em seguida vamos executar o docker build para gerar uma imagem com base nesse dockerfile:

> docker build . -t ubuntu-python
> docker run -ti ubuntu-python

=============================

Criando uma imagem personalizada do APACHE

Criar um webserver com vários arquivos de uma aplicação web.

cd /images
mkdir debian-apache
cd debian-apache
( a pasta temporária site é criada para baixar os arquivos da aplicação )
mkdir site
cd site
wget http://site1368633667.hospedagemdesites.ws/site1.zip
( precisamos transformar de zip para tar, por causa do comando que será utilizado no dockerfile para enviar os aquivos da aplicação para dentro do container, que só aceita arquivos tar)
unzip site1.zip
rm site1.zip
tar -czf site.tar ./
cp site.tar ../
cd ..
rm -Rf site
nano Dockerfile
	FROM debian
	RUN apt-get update && apt-get install -y apache2 && apt-get clean
	(ver na internet as variáveis de ambiente)
	ENV APACHE_LOCK_DIR="/var/lock"
	ENV APACHE_PID_FILE="/var/run/apache2.pid"
	ENV APACHE_RUN_USER="www-data"
	ENV APACHE_RUN_GROUP="www-data"
	(o comando abaixo faz a cópia e extrai os arquivos no container)
	ADD site.tar /var/www/html
	LABEL description = Apache webserver 1.0"
	VOLUME /var/www/html
	EXPOSE 80
	ENTRYPOINT ["/usr/sbin/apachectl"]
	CMD ["-D", "FOREGROUND"]

docker image build -t debian-apache:1.0 .
docker images
(a imagem já está pronta com o apache e a aplicação)
docker run -dti -p 80:80 --name meu-apache debian-apache:1.0
docker ps
ver o IP do container para testar
==================================

Criando imagens personalizadas a partir de imagens de linguagens de programação

Procurar "python" no Docker Hub
Ler a documentação
Copiar a referência do dockerfile
Baixar a imagem do python
> docker pull python
A imagem ficou bem maior que aquela que baixamos com o ubuntu
> cd /images
> mkdir python
> cd python
> nano app.py (simples)
> nano dockerfile
FROM python
WORKDIR /usr/src/app
COPY app.py /usr/src/app
CMD ["python","./app.py"]
> docker image build -t app-python:1.0 .
> docker run -ti --name runapp1 app-python:1.0
==============================

Gerando uma imagem MULTISTAGE

Dois estágios:
1) criar um binário numa aplicação
2) jogar esse binário num container linux

Conseguirei ter os dois recursos: um container com a liguagem de programação 

Desafio é manter a imagem num tamanho pequeno

Cada instrução do dockerfile adiciona uma camada na imagem

Compilação em vários estágios, vários FROM (um estágio pode usar recursos de outro estágio)

Vamos usar o golang e uma versão mínima do linux (alpine)

> cd images
> mkdir go
> cd go
> docker pull golang
> docker pull alpine
> nano app.go
(pegar o código no material da aula)
> nano dockerfile

FROM golang as exec
COPY app.go /go/src/app/
ENV GO111MODULE=auto
WORKDIR /go/src/app/
RUN go build -o app.go .

FROM alpine
WORKDIR /appexec
COPY --from=exec /go/src/app /appexec
RUN chmod -R 755 /appexec
ENTRYPOINT ./app.go

> docker image build -t app-go:1.0 .

> docker images (observar os tamanhos)

> docker run -ti --name meuappok app-go:1.0
==============================================

Realizando o upload de imagens para o Docker Hub

(conta gratuita do docker hub permite somente uma imagem privada)

Para subir no dockerhub é preciso especificar o usuário ao gerar a imagem.

> docker login (usuário e senha do docker hub)
> docker build . -t szalbuque/my-goapp:1.0
> docker push szalbuque/my-goapp:1.0


==============================

Registry - criando um servidor de imagens

Criar outra VM (ou usar o localhost).

Docker hub: container registry
Ver a documentação oficial
> instalar o docker
> docker run -d -p 5000:5000 --restart=always --name registry registry:2

Voltar na VM onde estamos fazendo as imagens:

> docker logout (para deslogar do docker hub)
> docker image tag iddaimagem ipdoservidorregistry:5000/mygoapp:1.0 

(ver se tem imagem lá no servidor)
> curl ipdoservidorregistry:5000/v2/_catalog
> docker push ipdoservidorregistry:5000/my-goapp:1.0

(se der erro de https)
> nano /etc/docker/daemon.json
{ "insecure-registries":["ipdoservidorregistry:5000"]}
> systemctl restart docker
> docker push ipdoservidorregistry:5000/my-goapp:1.0
> curl ipdoservidorregistry:5000/v2/_catalog

(testar o pull)
Excluir a imagem local.
> docker rmi -f iddaimagem

Baixar do servidor de registro
> docker pull ipdoservidorregistry:5000/my-goapp:1.0













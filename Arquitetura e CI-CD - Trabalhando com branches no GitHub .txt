O que são Branches

Problemas:
- faço um commit para a branch main e há um bug... o usuário já vai ter contato com o bug enquanto eu ainda preciso corrigir o erro
- começo a fazer uma alteração mas não há tempo de terminar antes de fazer o commit, ao final do dia, quando volto para trabalhar, queimou meu HD e perdi tudo porque não tinha feito o commit

Por isso precisamos ter outras branches, além da main.

=================

Entendendo na prática sobre branches

Main ou Master
- pode ser escolhido nno momento da instalação do Git.

O github já sugere o main.

==================
Guiando-se nas branches com a tag HEAD

Uma tag é um nome para um ponto no tempo (um commit), a tag HEAD aponta sempre para o último commit.

https://git-school.github.io/visualizing-git/

==================
Comando checkout e merge

Criar uma nova branch e mover para ela:
$ git checkout -b nova-funcionalidade

Mover para outra branch:
$ git checkout main

Fundir as duas branches:
Voltar para a branch main:
$ git checkout main
$ git merge nova-funcionalidade

===================

VISUALIZAÇÃO DE HISTÓRICO

Comando STASH e seus subcomandos

Em que branch estou? Que branches eu tenho? (a branch atual é marcada com asterisco)
$ git branch

Renomear a branch em que estou:
$ git branch -m funcionalidade

Renomear qualquer branch:
$ git branch -m funcionalidade nova-funcionalidade

Deletar uma branch:
$ git branch -d nova-funcionalidade

------------------
Quando trocar de uma branch para outra, tem que ter cuidado para não levar arquivos da outra branch.
Se usar o git checkout isso pode acontecer.
Precisa usar o STASH.
O Stash é como uma caixinha.
$ git stash save "guardando arquivos para iniciar alterações" (pega tudo que está o stage e guarda na caixinha)
$ git status (não tem mais nada lá)
Fica seguro para não carregar o contexto do trabalho que estava fazendo antes para a branch nova.
$ git stash pop 1 (volta o stash 1 para a área stage)
$ git stash clear (limpa o stash)
=====================

COMANDO GIT LOG

Histórico: registro cronológico de commits.

Entrar no repositório com o git bash e digitar:
git log
Teclar q para sair

Ver o histórico de uma pasta específica:
git log nomedapasta

Ver o histórico de um arquivo específico:
git log nomedoarquivo

===================
SUBCOMANDOS ESPECÍFICOS COM O GIT LOG

$ git log --oneline (mostra de forma resumida o histórico)

Visualizar as branches de forma visual:

$ git log --graph

$ gitk (ferramenta gráfica)

====================

CONCEITOS INICIAIS SOBRE REVERTER COMMITS

Usar o VSCode

Posso reverter usando o hash do commit ou pela HEAD.

Criar um repositório local. Abrir pelo VSCode.
O VSCode adiciona a letra U quando o arquivo está untracked.
A letra A quando o arquivo foi adicionado ao stage.

git reset shadocommit (volta para o estado em que estava nesse commit)

git reset HEAD~1 (volta para o estado do commit anterior ao da HEAD)

git reset HEAD~2 (volta para o estado do commit que está dois passos atrás do HEAD)

-- soft (volta ao estado em que foi dado apenas o git add - staging area)
-- mixed (volta ao estado anterior ao git add - working area)

Cuidado ao usar:
-- hard (simplesmente desfaz todas as alterações que tinham entrado naquele commit, inclusive deletando arquivos que tinham sido criados)

====================

GIT REVERT (commit invertido)

- cria um commit desfazendo as alterações do commit escolhido

$ git revert HEAD~1
=======================

ESTRUTURANDO COMMITS

- melhor legibilidade do histórico
- amigável para novos devs
- amigável ao versionamento semântico

COMMITS ATÔMICOS
- o commit inclui todas as tarefas realizadas para um objetivo conciso

Português x Inglês
- depende do contexto

Estrutura:
- Assunto
- Corpo
- Rodapé

Assunto: 
- curto e compreensível
- até 50 caracteres
- começar com letra maiúscula
- não terminar em ponto
- escrito de forma imperativa
-- Pense assim: If applied, this commit will add payment integration
-- em inglês: add a feature; modify an existing feature; remove a feature
-- Pense assim: se aceito, esse commit adiciona método de pagamento
-- em português: adiciona a funcionalidade x; modifica uma funcionalidade existente; remove a funcionalidade y

Corpo:
- adicione detalhes ao commit
- tente quebrar a linha em 75 caracteres
- identifique sua audiência
- explique tudo (não assuma que a pessoa tem conhecimento prévio, nem que o código é autoexplicativo)
- use markdown (títulos destacados, bullet topics, etc.)

Rodapé: (opcional)
- referencie assuntos relacionados (issues)

No github:
- issues: questões ou problemas encontrados;

O editor padrão do git bash é o vim. Se eu digitar apenas git commit (sem o -m) ele vai abrir o editor padrão.

Para trocar o editor padrão (nesse caso é o VSCode):
$ git config --global core.editor "code --wait"

Para remover essa configuração:
$ git config --global --unset core.editor

==========================

COMMITS SEMÂNTICOS

SEMANTIC VERSIONING (http://semver.org)

Exemplo: 3.2.7
3 -> major (funcionalidade que quebra compatibilidade, grande diferença)
2 -> minor (implementa funcionalidade sem quebrar compatibilidade)
7 -> patch (correções de bug, pequenas alterações)

Conventional Commits (http://www.conventionalcommits.org) (LER ESSA PÁGINA!)
--------------------
Define um conjunto de regras para criar um histórico de commit explícito.
Facilita a criação de ferramentas automatizadas.
Tipos de commit: fix (patch); feat (minor); breaking change (major)

Facilita o uso de ferramentas de versionamento que vai incrementar automaticamente o número de versão.

As ferramentas podem gerar também LOGS automáticos.

====================





